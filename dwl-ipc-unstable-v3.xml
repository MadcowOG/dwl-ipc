<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="/usr/share/wayland/wayland.dtd" type="application/xml-dtd"?>
<protocol name="dwl_ipc_unstable_v3">
    <description summary="inter-proccess-communication about dwl's state">
        This protocol allows clients to update and get updates from the compositor.

        Warning! The protocol described in this file is experimental and
        backward incompatible changes may be made. Backward compatible
        changes may be added together with the corresponding interface
        version bump.
        Backward incompatible changes are done by bumping the version
        number in the protocol and interface names and resetting the
        interface version. Once the protocol is to be declared stable,
        the 'z' prefix and the version number in the protocol and
        interface names are removed and the interface version number is
        reset.
    </description>

    <interface name="zdwl_ipc_manager_v3" version="1">
        <description summary="manage dwl state">
            This interface is exposed as a global in wl_registry.

            Clients can use this interface to get a dwl_ipc_output.
            After binding the client will recieve the dwl_ipc_manager.tag_amount and dwl_ipc_manager.layout events.
            The dwl_ipc_manager.tag_amount and dwl_ipc_manager.layout events expose tag amount and layouts to the client.
        </description>
        <request name="release" type="destructor">
            <description summary="release dwl_ipc_manager">
                Indicates that the client will not use this dwl_ipc_manager anymore.
                Objects created through this instance are not affected.
            </description>
        </request>
        <request name="get_output">
            <description summary="get a dwl_ipc_output for a wl_output">
                Get a dwl_ipc_output for the given wl_output.
            </description>
            <arg name="id" type="new_id" interface="zdwl_ipc_output_v3"/>
            <arg name="output" type="object" interface="wl_output"/>
        </request>
        <event name="tag_amount">
            <description summary="announces tag amount">
                This event is sent after binding.

                Announces the compositor's tag amount. If the client's tag amount does not match the compositor's, the client should error.
                Making requests to the compositor with mismatched tag amounts is undefined behavior.
            </description>
            <arg name="amount" type="uint"/>
        </event>
        <event name="layout">
            <description summary="Announces a layout">
                This event is sent after binding.

                A roundtrip after binding guarantees the client recieved all layouts.
            </description>
            <arg name="symbol" type="string"/>
        </event>
    </interface>

    <interface name="zdwl_ipc_output_v3" version="1">
        <description summary="control dwl output">
            Observe and control a dwl output.

            Events are double-buffered:
            Clients should cache events and redraw when a dwl_ipc_output.frame event is sent.

            Request are not double-buffered:
            The compositor will update immediately upon request.
        </description>
        <request name="release" type="destructor">
            <description summary="release dwl_ipc_output">
                Indicates that the client will not use this dwl_ipc_output anymore.
            </description>
        </request>
        <request name="set_tags">
            <description summary="set the active tags of this output"/>
            <arg name="tagmask" type="uint" summary="bitmask of the tags that should be set"/>
            <arg name="toggle_tagset" type="uint" summary="boolean value, toggle the selected tagset"/>
        </request>
        <request name="set_client_tags">
            <description summary="set the tags of the selected client"/>
            <arg name="tagmask" type="the new tagmask for the selected client"></arg>
        </request>
        <request name="set_layout">
            <description summary="set the layout of this output"/>
            <arg name="index" type="uint" summary="index of a layout recieved by dwl_ipc_manager.layout"/>
        </request>
        <event name="title">
            <description summary="update title">
                Indicates the title has changed.
            </description>
            <arg name="title" type="string" summary="the new title"/>
        </event>
        <event name="appid">
            <description summary="update appid">
                Indicates the appid has changed.
            </description>
            <arg name="appid" type="string" summary="the new appid"/>
        </event>
        <event name="tags">
            <description summary="update the state of the tags">
                Indicates that tags have updated.
            </description>
            <arg name="tagset" type="uint" summary="the active tagset"/>
            <arg name="occupied" type="uint" summary="the occupied tags, 0 if no tags are occupied"/>
            <arg name="seltags" type="uint" summary="the tags of the selected client, 0 if there is no selected client"/>
            <arg name="urgent" type="uint" summary="the urgent tags, 0 if no tags are urgent"/>
        </event>
        <event name="layout">
            <description summary="update the layout">
                Indicates a new layout is selected.
                This should be used to keep track of the compositor's active layout for when the client wants to change the layout.
            </description>
            <arg name="layout" type="uint" summary="index of the layout"/>
        </event>
        <event name="layout_symbol">
            <description summary="update the current layout symbol">
                Indicates the layout has changed. Since layout symbols are dynamic,
                as opposed to the zdwl_ipc_manager.layout event, this should take precendence when displaying.
            </description>
            <arg name="symbol" type="string" summary="The new layout"/>
        </event>
        <event name="fullscreen">
            <description summary="update fullscreen status">
                Indicates if the selected client on this output is fullscreen.
            </description>
            <arg name="is_fullscreen" type="uint" summary="boolean value, the selected client is fullscreen"/>
        </event>
        <event name="floating">
            <description summary="update floating status">
                Indicates if the selected client on this output is floating.
            </description>
            <arg name="is_floating" type="uint" summary="boolean value, the selected client is floating"/>
        </event>
        <event name="selected">
            <description summary="update the selected output.">
                Indicates if the output is selected.
            </description>
            <arg name="is_selected" type="uint" summary="boolean value, the output is selected"/>
        </event>
        <event name="toggle_visibility">
            <description summary="toggle client visibilty">
                Indicates the client should hide or show.
                If the client is visible then hide, if hidden then show.
            </description>
        </event>
        <event name="done">
            <description summary="The update sequence is done.">
                Indicates that a sequence of status updates have finished and the client should redraw.
            </description>
        </event>
    </interface>
</protocol>
